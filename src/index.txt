const BASE_URL = 'https://656ec3a06529ec1c6236974d.mockapi.io/api'
export default BASE_URL
import axios from "axios";
import BASE_URL from "../BASE_URL";

// get all
export const getAllUsers = async() => {
    let users;
    await axios.get(`${BASE_URL}/users`)
    .then((res)=>{
        users = res.data;
    })
    return users; 
}

// get userByID 
export const getUserByID = async(id)=>{
    let user;
    await axios.get(`${BASE_URL}/users/${id}`)
    .then((res)=>{
        user = res.data;
    })
    return user;
}

// post user
export const postUser = async(payload)=>{
    let newUser;
    await axios.post(`${BASE_URL}/users`, payload)
    .then((res)=>{
        newUser = res.data;
    })
    return newUser;
}

export const updateUserPassword = async (userId, newPassword) => {
    try {
      const response = await axios.put(`${BASE_URL}/users/${userId}`, {
        password: newPassword,
      });
      return response.data;
    } catch (error) {
      console.error(`Error updating password for user ${userId}: `, error);
      return null;
    }
  };
  import React, { createContext, useState } from 'react';

export const UserContext = createContext();

const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loggedInUser, setLoggedInUser] = useState(null);
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [requestsModalVisible, setRequestsModalVisible] = useState(false);

  return (
    <UserContext.Provider value={{
        user,
        setUser,
        loggedInUser,
        setLoggedInUser,
        editModalVisible,
        setEditModalVisible,
        requestsModalVisible,
        setRequestsModalVisible,
        }}>
      {children}
    </UserContext.Provider>
  );
};

export default UserProvider;
import React, { useContext } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { Button, TextField, Typography, FormControlLabel, Checkbox } from '@mui/material';
import { Link, useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import axios from 'axios';
import BASE_URL from '../../../services/api/BASE_URL';
import './index.module.css';
import { UserContext } from '../../../services/context/index';

const LoginSchema = Yup.object().shape({
  username: Yup.string().required('Username is required'),
  password: Yup.string().required('Password is required'),
});


const Login = () => {
  const { setUser } = useContext(UserContext)
  const initialValues = {
    username: '',
    password: '',
  };

  const navigate = useNavigate();

  const handleSubmit = async (values, { setSubmitting }) => {
    const { username, password } = values;
    try {
      const response = await axios.get(`${BASE_URL}/users?search=${username}&password=${password}`);
      const userData = response.data;
      
      const loggedInUser = userData.find(user => user.username === username && user.password === password);

      if (loggedInUser) {
        localStorage.setItem('loggedInUser', JSON.stringify(loggedInUser));
        setUser(loggedInUser);
        Swal.fire({
          icon: 'success',
          title: 'Sign In Successful!',
          text: 'You have successfully signed in.',
          confirmButtonText: 'OK',
        });
        navigate('/home');
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Credentials',
          text: 'Incorrect username or password. Please try again.',
          confirmButtonText: 'OK',
        });
      }
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="container">
      <Typography variant="h4" style={{ color: 'white', textAlign: 'center' }} gutterBottom>
        Sign In Form
      </Typography>
      <Formik initialValues={initialValues} validationSchema={LoginSchema} onSubmit={handleSubmit}>
        {({ isSubmitting }) => (
          <Form style={{ width: '300px', boxShadow: '0px 0px 5px rgba(0, 0, 0, 0.2)', padding: '30px', borderRadius: '8px', backgroundColor:'white' }}>
            <Field name="username">
              {({ field }) => (
                <TextField
                  {...field}
                  label="Username"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  helperText={<ErrorMessage name="username" />}
                />
              )}
            </Field>
            <Field name="password">
              {({ field }) => (
                <TextField
                  {...field}
                  type="password"
                  label="Password"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  helperText={<ErrorMessage name="password" />}
                />
              )}
            </Field>
            <FormControlLabel control={<Checkbox name="isPublic" color="primary" />} label="Remember me" />
            <Button
              variant="contained"
              color="secondary"
              type="submit"
              fullWidth
              disabled={isSubmitting}
              style={{ marginTop: '15px' }}
            >
              Sign In
            </Button>
          </Form>
        )}
      </Formik>
      <Typography variant="body1" style={{ marginTop: '25px' }}>
        Don't you have an account? <Link to="/register" style={{ color: 'black' }}>Sign up here</Link>
      </Typography>
    </div>
  );
};

export default Login;
import React, { useEffect, useState, useContext } from "react";
import { EditOutlined, InboxOutlined, LockOutlined } from "@ant-design/icons";
import { Avatar, Card, Button, Modal, Form, Input, List } from "antd";
import UserNavbar from "../../../components/UserNavbar";
import { UserContext } from "../../../services/context";
import BASE_URL from '../../../services/api/BASE_URL';
import { updateUserPassword } from '../../../services/api/users';

const { Meta } = Card;

const UserPage = () => {
  const {
    loggedInUser,
    setLoggedInUser,
    editModalVisible,
    setEditModalVisible,
    requestsModalVisible,
    setRequestsModalVisible,
  } = useContext(UserContext);

  const [editForm] = Form.useForm();
  const [passwordModalVisible, setPasswordModalVisible] = useState(false);
  const [passwordForm] = Form.useForm();

  useEffect(() => {
    const storedUser = localStorage.getItem("loggedInUser");
    if (storedUser) {
      const parsedUser = JSON.parse(storedUser);
      setLoggedInUser(parsedUser);
    }
  }, [setLoggedInUser]);

  const handleEditClick = () => {
    setEditModalVisible(true);
    editForm.setFieldsValue({
      fullName: loggedInUser.fullName,
      bio: loggedInUser.bio,
      email: loggedInUser.email,
      username: loggedInUser.username,
    });
  };

  const handleEditModalCancel = () => {
    setEditModalVisible(false);
  };

  const handleSaveChanges = () => {
    editForm.validateFields().then((values) => {
      const updatedUser = {
        ...loggedInUser,
        fullName: values.fullName,
        bio: values.bio,
        email: values.email,
        username: values.username,
      };

      localStorage.setItem("loggedInUser", JSON.stringify(updatedUser));
      setLoggedInUser(updatedUser);
      setEditModalVisible(false);
    });
  };

  const handleRequestsClick = () => {
    setRequestsModalVisible(true);
  };

  const handleRequestsModalCancel = () => {
    setRequestsModalVisible(false);
  };

  const handlePasswordEditClick = () => {
    setPasswordModalVisible(true);
  };

  const handlePasswordModalCancel = () => {
    setPasswordModalVisible(false);
  };

  const handleSavePasswordChanges = async () => {
    passwordForm.validateFields().then(async (values) => {
      if (!values.currentPassword || !values.newPassword || !values.confirmNewPassword) {
        return;
      }
      const userId = loggedInUser.id;

      if (values.newPassword === values.confirmNewPassword) {
        const newPassword = values.newPassword;
        const updatedUser = await updateUserPassword(userId, newPassword);
  
        if (updatedUser) {
          setPasswordModalVisible(false);
          passwordForm.resetFields();
        }   
        // add 
      } 
    });
  };
  

  return (
    <>
      <UserNavbar />
      {loggedInUser && (
        <div
          style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <Card
            style={{
              width: 500,
            }}
            actions={[
              <Button key="edit" onClick={handleEditClick}><EditOutlined  /></Button>,
              <Button key="password" onClick={handlePasswordEditClick}><LockOutlined /></Button>,
              <Button key="requests" onClick={handleRequestsClick}>
                Requests
              </Button>,
            ]}
          >
            <Meta
              avatar={
                loggedInUser.profilePicture ? (
                  <Avatar
                    style={{ width: "10vh", height: "10vh" }}
                    src={loggedInUser.profilePicture}
                  />
                ) : (
                  <Avatar
                    style={{ width: "10vh", height: "10vh" }}
                    src="https://static.thenounproject.com/png/5034901-200.png"
                  />
                )
              }
              title={loggedInUser.username}
              description={loggedInUser.bio}
            />
          </Card>
          {/* Edit Profile Modal */}
          <Modal
            title="Edit Profile"
            visible={editModalVisible}
            onCancel={handleEditModalCancel}
            footer={[
              <Button key="save" type="primary" onClick={handleSaveChanges}>
                Save Changes
              </Button>,
              <Button key="cancel" onClick={() => setEditModalVisible(false)}>
                Cancel
              </Button>,
            ]}
          >
            <Form form={editForm} layout="vertical">
              <Form.Item label="Full Name" name="fullName">
                <Input maxLength={150} />
              </Form.Item>
              <Form.Item label="Bio" name="bio">
                <Input.TextArea maxLength={150} rows={4} />
              </Form.Item>
              <Form.Item label="Email" name="email">
                <Input type="email" />
              </Form.Item>
              <Form.Item label="Username" name="username">
                <Input />
              </Form.Item>
            </Form>
          </Modal>
          {/* Password Modal */}
          <Modal
            title="Change Password"
            visible={passwordModalVisible}
            onCancel={handlePasswordModalCancel}
            footer={[
              <Button
                key="save"
                type="primary"
                onClick={handleSavePasswordChanges}
              >
                Save Changes
              </Button>,
              <Button key="cancel" onClick={handlePasswordModalCancel}>
                Cancel
              </Button>,
            ]}
          >
            <Form form={passwordForm} layout="vertical">
              <Form.Item
                label="Current Password"
                name="currentPassword"
                rules={[
                  {
                    required: true,
                    message: "Please enter your current password",
                  },
                ]}
              >
                <Input type="password" />
              </Form.Item>
              <Form.Item
                label="New Password"
                name="newPassword"
                rules={[
                  { required: true, message: "Please enter a new password" },
                  { min: 5, message: "Password must be at least 5 characters" },
                  {
                    pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{5,}$/,
                    message:
                      "Password must contain at least one uppercase letter, one lowercase letter, and one digit",
                  },
                ]}
              >
                <Input type="password" />
              </Form.Item>
              <Form.Item
                label="Confirm New Password"
                name="confirmNewPassword"
                dependencies={["newPassword"]}
                rules={[
                  {
                    required: true,
                    message: "Please confirm your new password",
                  },
                  ({ getFieldValue }) => ({
                    validator(_, value) {
                      if (!value || getFieldValue("newPassword") === value) {
                        return Promise.resolve();
                      }
                      return Promise.reject(
                        new Error("The two passwords do not match")
                      );
                    },
                  }),
                ]}
              >
                <Input type="password" />
              </Form.Item>
            </Form>
          </Modal>
          {/* Requests Modal */}
          <Modal
            title="Requests"
            visible={requestsModalVisible}
            onCancel={handleRequestsModalCancel}
            footer={[
              <Button key="back" onClick={handleRequestsModalCancel}>
                Close
              </Button>,
            ]}
          >
            <List
              header={<div>Incoming Requests</div>}
              bordered
              // dataSource={[]}
              renderItem={(item) => (
                <List.Item>
                  <InboxOutlined /> {item}
                </List.Item>
              )}
            />
          </Modal>
        </div>
      )}
    </>
  );
};

export default UserPage;

login olduqdan sonra localStorage'da saxlanilan user datalarin evezine user id saxlanilsin make changes and send all updated codes please